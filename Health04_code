# encoding: utf-8
import urllib, urllib2, sys
import ssl
import json
import base64
import Tkinter
from Tkinter import *
import tkFileDialog
root = Tk()
root.title('your unique nutrition suggestions')
la = Label(root, text="see nutrition in your food tag", font=("Arial", 18), width=30, height=2)
la.grid(row=0, column=0)
text_input=Entry(root)
text_input.grid(row=3, column=0)
bt_file=Label(root, text="enter the image path",font=("Arial", 12), width=40, height=1)
bt_file.grid(row=2, column=0)
var = StringVar()
l = Listbox(root, listvariable=var, width=50, height=20, font=("Arial", 12))
l.grid(row=1, column=0)
la1 = Label(root, text="enter your age:", font=("Arial", 15), width=40, height=1)
la1.place(x=450,y=20,anchor=NW)
entrytext1 = Entry(root)
entrytext1.place(x=600,y=55,anchor=NW)
la2 = Label(root, text="select your gender:",font=("Arial", 15), width=40, height=1)
la2.place(x=460,y=80,anchor=NW)
var1=StringVar()
r1=Radiobutton(root,text='female',font=("Arial", 12),variable=var1,value='female')
r1.place(x=600,y=110,anchor=NW)
r2=Radiobutton(root,text='male',font=("Arial", 12),variable=var1,value='male')
r2.place(x=600,y=140,anchor=NW)
la3 = Label(root, text="whether you are pregnant:",font=("Arial", 15), width=40, height=1)
la3.place(x=498,y=165,anchor=NW)
var2=StringVar()
r3=Radiobutton(root,text='yes',font=("Arial", 12),variable=var2,value='yes')
r3.place(x=600,y=200,anchor=NW)
r4=Radiobutton(root,text='no',font=("Arial", 12),variable=var2,value='no')
r4.place(x=600,y=230,anchor=NW)
la4 = Label(root, text='recommended nutrition intake:',font=("Arial", 15), width=40, height=1)
la4.place(x=505,y=300,anchor=NW)
var3 = StringVar()
l2 = Listbox(root, listvariable=var3, width=40, height=12, font=("Arial", 12))
l2.place(x=580,y=340,anchor=NW)
def ocr():
    IMAGE_PATH = text_input.get()
    f = open(IMAGE_PATH, 'rb')
    file_content = f.read()
    base64_image = base64.b64encode(file_content)
    host = 'https://ocrapi-ugc.taobao.com'
    path = '/ocrservice/ugc'
    method = 'POST'
    appcode = 'b7450899c4294c43b0b578a0f4f781bc'
    querys = ''
    bodys = {}
    url = host + path
    post_data = json.dumps({'img': base64_image, 'prob': "false"})
    request = urllib2.Request(url, post_data)
    request.add_header('Authorization', 'APPCODE ' + appcode)
    request.add_header('Content-Type', 'application/json; charset=UTF-8')
    ctx = ssl.create_default_context()
    ctx.check_hostname = False
    ctx.verify_mode = ssl.CERT_NONE
    response = urllib2.urlopen(request, context=ctx)
    content = response.read()
    if (content):
        return content
food_name=["Energy","Energy","Fat","Protein","calcium","A","Folic","Iron","Magnesium","Zinc"]
food_cn=[ u"能量",u"热量",u"脂肪",u"蛋白质",u"钙",u"维生素Ａ",u"叶酸",u"镁",u"锌"]
namelist=[]
def show_ocr_result():
    result = json.loads(ocr())
    for r in result['prism_wordsInfo']:
        l.insert(END, r['word'])
        word=r['word']
        word.encode("utf-8")
        for foodn in food_cn:
            if(foodn in word):
                namelist.append(food_name[food_cn.index(foodn)])
                break
bt = Button(root, text="see words in picture", font=("Arial", 12), command=show_ocr_result)
bt.grid(row=4, column=0)
food = {
    "Energy": { "day": "kcal", "child": [[1100, 1350], [1050, 1300]],
               "teenager": [[2400, 2900], [2200, 2400]], "adult": [[2400, 3200], [2100, 2700]],
               "elderly": [[1900, 3100], [1800, 2200]], "pregnant": [2300, 2900]},
    "Fat": { "day": "g", "child": [[45, 50], [20, 25]], "teenager": [[70, 75], [45, 50]],
            "adult": [[75, 80], [55, 60]], "elderly": [[55, 60], [50, 55]], "pregnant": [0, 0]},
    "Protein": { "day": "g", "child": [[35, 70], [35, 65]], "teenager": [[75, 85], [75, 80]],
                "adult": [[75, 90], [65, 80]], "elderly": [[75, 75], [65, 65]], "pregnant": [70, 100]},
    "Calcium": {"day": "mg", "child": [[800, 2000], [800, 2000]],
                "teenager": [[1000, 2000], [1000, 2000]], "adult": [[800, 2000], [800, 2000]],
                "elderly": [[1000, 2000], [1000, 2000]], "pregnant": [800, 2000]},
    "A": {"day": "ug", "child": [[500, 2000], [500, 2000]], "teenager": [[800, 2000], [600, 2000]],
          "adult": [[800, 3000], [700, 3000]], "elderly": [[800, 3000], [700, 3000]], "pregnant": [800, 2400]},
    "Folic": {"day": "ug", "child": [[150, 400], [150, 400]], "teenager": [[300, 800], [300, 800]],
              "adult": [[400, 1000], [400, 1000]], "elderly": [[400, 1000], [400, 1000]], "pregnant": [600, 1000]},
    "Iron": { "day": "mg", "child": [[10, 30], [10, 30]], "teenager": [[16, 50], [13, 50]],
             "adult": [[15, 15], [20, 20]], "elderly": [[15, 50], [15, 50]], "pregnant": [20, 60]},
    "Magnesium": { "day": "mg", "child": [[150, 500], [150, 500]], "teenager": [[350, 700], [350, 700]],
                  "adult": [[350, 700], [350, 700]], "elderly": [[350, 700], [350, 700]], "pregnant": [400, 700]},
    "Zinc": {"day": "mg", "child": [[12, 28], [12, 28]], "teenager": [[18, 43], [15, 35]],
             "adult": [[15, 45], [11.5, 37]], "elderly": [[11.5, 37], [11.5, 37]], "pregnant": [16.5, 35]}
}
def show_recommendation():
    age = int(entrytext1.get())
    sex = var1.get()
    ispregnant = var2.get()
    if (cmp(ispregnant, "yes") == 0):
        person_type = 'pregnant'
    elif (age >= 1 and age <= 11):
        person_type = 'child'
    elif (age > 11 and age < 18):
        person_type = 'teenager'
    elif (age >= 18 and age < 50):
        person_type = 'adult'
    elif (age >= 50):
         person_type = 'elderly'
    else:
        print('age is error!')
        sys.exit()
    if(cmp(sex,"female")==0):
        sextype=1
    elif(cmp(sex,"male")==0):
        sextype=0
    for name in namelist:
        if (person_type != 'pregnant'):
            low = food[name][person_type][sextype][0]
            high = food[name][person_type][sextype][1]
        else:
            low = food[name][person_type][0]
            high = food[name][person_type][1]
        a = name
        b = low
        c = high
        d = food[name]['day']
        l2.insert(END, "%s range :%d to %d%s" % (a, b, c, d))
button=Button(root,text="see recommendations", font=("Arial", 12),command=show_recommendation)
button.place(x=600,y=260,anchor=NW)
mainloop()

